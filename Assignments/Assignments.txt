@Episode 01 Inception

# What is Emmet?
- Emmets are add-on which allow us to use shortcuts for code, and then they expand into full pieces of code.

# Difference between a Library and Framework?
- A library is a collection of pre-written code that can be used to perform specific tasks.
  On the other hand, Framework is a pre-written code that provides a structute for developing software applications.

# What is a CDN? Why do we use it?
- CDN(Content Delivery Network), A CDN is a group of servers that store and deliver digital content such as images, video, and web dev tools etc.
    We use CDN to reduce latency, CDN can also improve content security,performance and availability.

# What is cross-origin in the script tag?
- The cross-origin attribute sets the mode of the request to a HTTP CORS request. A cross-origin request is a request for resources e.g., images, fonts, style sheets, etc.

# What is different between React and ReactDOM?
- React manages the core functionality of the code and handle the operations and structures of the UI, and whereas ReactDOM is responsible for the rendering React components to the DOM(Document Object Model) in a web browser.

# What is different between react.development.js and react.production.js files via CDN?
- react.development.js is used for the development of the application and it includes various development tools and warnings to catch and diagnose various  issues while developing the application, and whereas react.production.js is used for the production of the application and it is also optimized for performance and smaller bundle size.

@Epiose 02 - Ignite our App

# What is NPM?
- NPM is node module package manager which manages all the packages or dependencies, also NPM does not have a full form.

# What is Parcel/Webpack? Why do we need it?
- Parcel/Webpack, they are known as bundlers, they help us in so many things, they do so much work behind the scenes like, compressing, minification, bundling, and also provide local server and so many more things.
   We need them because they help us in bundling our app and combine it in a single package which is production ready.

# What is .parcel_cache?
- .parcel_cache is a auto-generated folder which is used for caching. Parcel genrate this folder on its own to make the perfomance of the server even more better.

# What is npx?
- npx is a command to execute a dependency.

# What is differnce between a dependencies and devDependencies?
-  Dev : Dev dependencies are usually used in development phase.
   Normal : Normal dependencies are usually used in production phase.

# What is Tree Shaking?
- Tree shaking is a process also known as "dead code elimination" which performs the elimination of unused code.

# What is Hot Module Replacement(HMR)?
- When we make changes in our app, by default parcel fully reload the page, but in some cases Parcel use HMR. HMR imporves the development experience by updating the modules at runtime in the browser without needing the whole page reload.

# List down your 5 favourite superpowers of Parcel and describe any 3 of them in your own words.
- 1. Dev build
  2. Lazy mode : In development, suppose if we have a huge application with alot of pages in it, then it can be frustating to start the server because it will take some time, but if we specify the command --lazy, the server starts quickly because it will only load the file in the browser to which we navigate, for instance if we are working on home page it will only load home page, but when we visit another page it will load the same.
  3. Tree Shaking : In production builds,It shakes the tree and removes any unused code generally known as "dead code elimination".
  4. Caching : Parcel cache everything in a folder 'disk'. When we restart the dev server, Parcel will only rebuild the files if there are any changes. Parcel automatically keeps track of the files, and if there's any change, it will rebuild. By default, it stores the cache in a folder named '.parcel_cache'.
  5. Minification : Parcel reduces the size of our files, by removing any white spaces and renaming variables to shorter names, and much more.

# What is .gitignore? What should we add and not add into it?
- .gitignore is a type which is used to to ignore certain files or folder, that should not be pushed in our GitHub Repository.
   We should never add files or folders that can re-generate themselves, and should add our core code of the app and package.json and package-lock.json.

# Why should i not modify package-lock.json?
- I should not modify package-lock.json because it keeps the exact version of the dependencies and update according to information we give e.g caret (^) or tilde(~), which means if we give caret(^) then it will only update the minor version of the dependency, on the other hand if we specify tilde(~), then it will update major version of the dependency.

# What is node_modules? Is it a good idea to push that on github?
- node_modules are a collection of all the dependencies or packages that our required, and no we should never push node_modules to github.

# What is 'dist' folder?
- 'dist' folder is an auto-generated folder by Parcel, and includes 3 type of files. Parcel converts our original file into more minified and optimized file and put them in dist folder, and the local server which is running by parcel use those files to show our app on the web.
   Not only parcel create this folder but every other build tools also.

# What is 'browserlists'?
- browserlists is a dependencies, we can use this dependency to specify that in which versions of the browsers our app must work, It does not mean that it won't work on other versions but it specifies that our app must work on the given versions.

@Episode 03 - Laying the foundation

# What is JSX?
- JSX is a HTML, JS like syntax, which was developed by the Facebook Developers.

# Superpowers of JSX
- JSX is a very powerful feature in React. One of the superpower of JSX is that, JSX can prevent cross-site scripting attacks(XXS). JSX does not run code blindly,the data is sanitized. When we do API and in some case if the API is attacked, then JSX will not execute the code.

# Role of the 'type' attribute in script tag? What options can i use there?
- The 'type' attribute is basically used to inform the browser that how to handle and execute the script.
 -- The options i can use are:
  1. text/javascript : It is the default script.
  2. text/html : It indicates the content within the script is HTML not JS.
  3. module : This type is used to denote modules.
  4. application/javascript : It is similar to text/javascript, it indicates JS code, It's less commonly used but still supported.

@Episode 04 - Talk is cheap, Show me the code

# IS JSX Mandatory for React?
- JSX is developed by facebook engineers, but JSX is not mandatory for React, although it makes our code much more simpler and readable.JSX is like a HTML, JS like syntax.JSX is not mandatory for React because we can use core React to write code, but the issue is its so messy and unreadable.

# Is ES6 Mandatory for React?
- In short No, because we can also use old not so old JS concept in React because react at the end of the is JS. Basically, React element is an object and object is what? It's JS.

# How can i write comments in JSX?
- The simplest way to write comments if we use VS code is (cntrl + /), otherwise we can do use a curly bracket: {/*This is a comment*/}.

# What is <React.Fragment></React.Fragment> and <></>?
- When we write code inside JSX we need to wrap it our code inside a fragment or a div, otherwise it will give and error. They can also be used to increase the performance of our app.

# What is Virtual DOM?
- It is basically a representation of the actual DOM in a virtual form. 
   - Virtual Representation : when changes are made to the web application, they are first made to the virtual DOM rather than manipulating the acutal DOM.
   - Diffing : After the changes are made to the virtual DOM, a process called 'diffin' is performed. The Virtual DOM is compared to its previous version, and this comparison decides what need to be changed in actual DOM.
   - Minimal Update : After identifying the changes, the virtual DOM calculates the minimal number of steps needed to update the actual DOM to match the updated Virtual DOM.
   These steps are knows as reconciliation or diffing.
   - Update to the Actual DOM : The identified changes are then made to the actual DOM.

# What is Reconciliation in React?
- It is a process to identify the difference or changes between the old virtual DOM and the new(updated) virtual DOM.

# What is React Fiber?
- React Fiber is an underlying architectural improvement in React that focuses on performance, error handling and concurrency. It's not something that we need to interact directly with. Instead, it is a part of React architecture designed to enhance the performance and responsiveness.

# Why we need React Keys? When do we need React keys?
- We need React keys because, if we don't provide key React will re-render all the elements of the component which we are looping through. Suppose if we have 100 cards and then we add another card, then React won't be able to know which card came in and it will re-render all tshe elements. It also affects the performance of our app.
        We need React keys when we are looping through the elements of the component.

# Can we use Index as keys in React?
- It depends on the situation, The best practice is to use some ID as the key. But in some cases there aren't any type of ID then we can use Index. Although, React Developers recommend to not use Index as the key.

# What is props in React?
- props are also known as properties. In a very simple language, props are just like arguments that we can pass to JS functions. props are used to pass the properties/Info. It returns us an object and an object is what? Its just JS. Whenever we have to dynamically pass data to components, we pass it through props.

# What is Config Driven UI?
- In simple terms, A website driven by config. It means controlling the UI, how the UI looke using the config/data.

@ Epiosde 05 Let's get Hooked

# What is difference between Named Export, Default export and * as export?
- Named export : We can do multiple export using named export.
  Default export : We can do only one export using word default, the word itself says default.
  But we can use both of the export in a single file.

# What is the importance of config.js file
- 

# What are React Hooks?
- Hooks are the superpowers which React allow us to use. Hooks let us use different React features from our components.

# Why do we need a useState Hook?
- We need useState hook to update the state of the var.Basically when we use useState, and the state of the component changes/update then React will re-render the component and apply the changes made.

@ Episode 06 Exploring The World

# What is a Microservice?
- Microservices is an architectural style where a complex web application is divided into small services and these services are often referred to as Microservices.Each microservice operate as a separate, self-contained unit and it communicates with other through well defined interfaces such as protocols and APIs.

# What is a Monolith architecture?
- Monolith architectural style where the whole complex web application is in a single project.

# What is difference between a Microservice and Monolithic architecture?
- Monolith architecture : 
   1. In monolithic architecture our whole application is contained in a single unit.
   2. In monolithic architecture we are limited to use different languages.
   3. New programmers find it very difficult to code.
   4. We have to update the whole application even if we need to change the color of just a button, and it can be very heavy pain.
  Microservice architecture : 
   1. Whereas in microservice architecture our complex web application is divided into small services and these services are often referred to as Microservices.
   2. In microservice architecture we can use different languages for different services/unit.
   3. It is not difficult for new developers to find bugs.
   4. It is very easy to make changes in any service.

# Why do we need useEffect Hook?
- What is a hook at the end of day? It's just a normal JS function, which react gave superpowers to it.
  We need useEffect Hook to make API calls or anything which we need to render after the component is rendered.It allows us to manage side effects in our components.

# What is Optional Chainig?
- Optional chainig is a process in which instead of showing error it shows undefined or null.

# What is Shimmer UI?
- Shimmer UI is a fake skeleton of our app which we render until we have successfully made an API call.

# What is the difference between JS expression and JS statement?
- JS expression:
  1. JS expression is a piece of code that produces a value.
  JS statement:
  1. JS statement is a line of code that performs an action.

# What is conditional rendering?
- Conditional rendering means to render our component using a condition. for example, 
  we have component name : <Header /> and a component named <Shimmer /> and we want to render shimmer until our Header gets a response from the API.
  listOfRes.length == 0 ? <Shimmer> : <Header />

# What is CORS?
- Cross-origin resource sharing (CORS) is a browser mechanism that allows devices on one domain to access resources on other domains

# What is async await?
- async await is functionality which returns a promise. let's say we have an async function and inside of that function we need to wait for a promise to resolve, so we use await keyword to wait for a promise to get resolved.

# What is the use of 'const json = await data.json(); ?
- It means that we are waiting for the promise to get resolved and once the promise is resolved then we are passing the data in json var in json formalt using .json() function.

@ Epiosde 07 - Finding the Path

# What would happen if we do console.log(useState())?
- It will return an Array of Object.

# How will useEffect behave if we don't add a dependency Array?
- If we do not add a dependency array, then useEffect will render every time when component renders, and if we are doing API call inside useEffect then it is not a good idea to to not add a dependency array.

# What is SPA?
- SPA refers to Single Page Application, In simple terms single page application means to not load the application more than once via., Client Side Routing. When we load the application for the first time and we receive the response, and then if we want to go to a different page in the website then our website should not load, it just refreshes the content not the whole website.

# What is difference between Client Side Routing and Server Side Routing?
- Client Side Routing : Unlike Server Side Routing, the response is received once and then the user can visit the different pages of the website without even needing to load the application.
  Server Side Routing : The traditional way to create a website was to make separate files, for instance., index.html, about.html etc. and then when the user visits the website and surfe through different pages our website used to request data from the server again whenever the user cahnges the page and gets the response.

  @ Episode 08 - Let's get Classy

  # How do you create Nested Routes in reat-router-dom configuration?
  - First we need create createBrowserRoute and then we need to create a parent route and inside that parent we need to pass a property named children, and inside children we create Nested Route just like normal route, For example, children : [{path:'/', element:'component'}].

# Why do we use componentDidMount?
- We need componentDidMount to render things after the initial render. In most cases we use componentDidMount to make an API call, because when our web application loads first we render our component with fake skeleton (shimmer) so that our app does not look empty and also API takes some time to get a response, so after our component is rendered and then we make an API call and fill the data inside the component.

# Why do we use componentWillUnmount?
- We use componentWillUnmount after we leave the page, the most case use of componentWillUnmount is to clear the code which can be hanging in our browser. For instance., if we have a setInterval or setTimeout.

# Why do we use super(props) in constructor?
- We use super(props) in constructor because it allows us to access 'this.props' keyword.

# Why can't we have the callback function of useEffect async?
- useEffect is synchronous and it handles the lifecycle events such as update and unmounting, using asynchrony might break these expectations and lead to unexpected behaviour and can also lead to unpredictable re-renders which is a bad thing.

@ Epiosde 09 - Let's optimize our app

# When and why do we need lazy()?
- We need lazy() when we have a huge or mid sized application which has alot of component in it. We need lazy(), so that we can optimize our app even more, Bundlers, they minify our code into a single js file and suppose if we have 1000s of components then the file would be very huge and it will compromise the performance, So what we do is, We use chunking and React provides lazy() fucntion(which returns a promise) in order to do that.

# What is suspense?
- Suspense is component provided by React, and we need to wrap our component inside Suspense component with lazy(), because React quickly renders things and if we do not provide Suspense it will throw error because while our component was loading React rendered and it had nothing to render so it gave error. Suspense takes a fallback which can be anything let's say Shimmer UI, until it loads the component it will render Shimmer UI, because React is so fast it needs something to render.

# Advantages and Disadvantages of using this code splitting?
- Advantages: 
  1. We can bundle our app into small files, which will enhace the performance
  2. Our app is much more lighter.
  Disadvantages:
  1.Complex Configuration
  2. Webpack and Build Tool Dependencies

@ Epiosde 11 -Data is the new Oil

# What is prop drilling?
- prop drilling means to drill the prop from parent to its children. Suppose we have a parent component and it has 10 children components and if we the 9th component want to use something from the parent then we have to pass the props from the parent to each child component.

# What is lifting the state up?
- It kinda means to lift the state from the child component to the closest parent component and then pass it to the child component through props and it also known as controlled component. Which Basically means instead of child component controlling its own state, we give that power to the closest parent component and then pass it to the child component.

# What are Context Provider and Context Consumer?
- Context Provider means to provide the context to anywhere in the application where you provide it.
  Context Consumer is an old way to use context in class based function.

# if you don't pass a value to the provider, does it take the default value?
- You have to pass the value prop to the provider otherwise it will throw an error or give you a warning for missing prop value.The default value specified in createContext is used only when there is no matching UserContext.Provider in the component tree.

@ Episode 12 - Let's build our store

# What is Redux?
- Redux is basically like big object which has a lot of data in it. It is like a store which contains the global state which can be accessed anywhere in the tree of our app.

# useContext vs Redux
- useContext :
   1. useContext is a React Hook.
   2. It is used to share the data.
   3. Changes are made with the Context Value.
   4. We can change the state in it.
   5. It is perfect for small and medium sized applications.
   6. It is easy to Understand.
- Redux :
   1. Redux is JS library for managing state.
   2. It is used to manage data and state.
   3. Changes are made with the pure function which is Reducer.
   4. We can not directly Mutate the state.(In the updated version(RTK), We have to MUTATE the state).
   5. It is perfect for large scale applications.
   6. It comes with a lot of initial learning curve and it is kind of complex.
  
# Advantages of using ReduxToolkit over Redux.
- 1. RTK is much more simpler than Redux Core.
  2. There are many chances to make mistakes in Redux core, RTK has solved this issue.
  3. Creating stores are very simple.
  4. We can create Slices for each part of our app.
  5. We can Mutaute the state directly.(Immer takes care of that Behind the scenes).

# Explain Dispatcher
- Whenever we want to make something happen based on User Interaction we dispatch an action. Suppose a button is clicked and when it is clicked it dispatches an action which called the reducer function and then update happens.

# Explain Slice.
- Slices are pieces of our app which we eventually store in our store. We can have different slices for different components, for instance, we can have a theme slice, a user slice, and much more.

# Explain Selector.
- Selector means subscring to the store, We use selector to read data which means that our app is in syc with our store, and whenever our data changes our component which are subscribed changes automagically.

# Explain createSlice and the configuration it takes.
- In order to create a slice we need to import createSlice from @reduxjs/toolkit,
  and then we need to name our slice const themeSlice = createSlice({}),
  and now in the object it takes: name, initalState, reducers and lastly we need to export them,
  we need to export our reducer and actions.
  export const {addItem,removeItem} = themeSlice.actions;
  export default themeSlice.reducer;


